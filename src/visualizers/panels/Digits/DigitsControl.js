/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Aug 01 2023 13:22:37 GMT-0700 (Pacific Daylight Time).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function DigitsControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._updateWidget = null;
        this._descriptor = null;

        //this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
    }

    DigitsControl.prototype.registerUpdate = function (func) {
        console.log('trying to register...');
        const firstTry = this._updateWidget === null ? true : false;
        this._updateWidget = func;

        this._updateWidget(this._descriptor);

        //comment the following out before having any plugins

        // if (this._descriptor && firstTry) {
        //     //this._updateWidget(this._descriptor);
        //     this._updateWidget(this._descriptor);
        // }
    };

    DigitsControl.prototype.undo = function (data) {
        const { _client, _META, _currentNodeId, _logger } = this;
        const context = _client.getCurrentPluginContext('Undo');
        //console.log(context)
        context.managerConfig.activeNode = _currentNodeId;
        context.managerConfig.namespace = null;
        context.pluginConfig = data;

        _client.runBrowserPlugin('Undo', context, (err, result) => {
            if (err === null && result) {
            } else {
                //TODO - make a proper way of handling this
                _logger.error('Failed to collect descriptor', err);
            }
        })
    }
    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    DigitsControl.prototype.selectedObjectChanged = function (nodeId) {
        const { _logger, _client } = this;

        _logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (this._currentNodeId) {
            _client.removeUI(this._territoryId);

        }

        this._currentNodeId = nodeId;
        this._currentNodeParentId = _client.getNode(this._currentNodeId).getParentId();

        if (typeof this._currentNodeId === 'string') {
            // Put new node's info into territory rules
            this._selfPatterns = {};
            this._selfPatterns[this._currentNodeId] = { children: 3 }; //all workflows in the project

            this._territoryId = _client.addUI(this, events => {
                this._eventCallback(events);
            });

            // Update the territory
            _client.updateTerritory(this._territoryId, this._selfPatterns);
        }

    };

    DigitsControl.prototype._createDescriptor = function () {
        const { _client, _META, _currentNodeId, _logger } = this;
        if (typeof _currentNodeId === 'string') {
            const context = _client.getCurrentPluginContext('pluginName');
            //console.log(context)
            context.managerConfig.activeNode = _currentNodeId;
            context.managerConfig.namespace = null;
            context.pluginConfig = {};

            _client.runBrowserPlugin('pluginName', context, (err, result) => {

                if (err === null && result && result.success) {
                    const descriptor = JSON.parse(result.messages[0].message);
                    this._descriptor = descriptor;
                    if (this._updateWidget) {
                        this._updateWidget(descriptor);
                    }
                } else {
                    //TODO - make a proper way of handling this
                    _logger.error('Failed to collect descriptor', err);
                }
            });
        }
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    DigitsControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        if (events[0] && events[0].etype === 'complete') {
            //we have what we need

            this._createDescriptor();
        }
        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
        /*
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');

        while (i--) {
            event = events[i];
            switch (event.etype) {

            case CONSTANTS.TERRITORY_EVENT_LOAD:
                this._onLoad(event.eid);
                break;
            case CONSTANTS.TERRITORY_EVENT_UPDATE:
                this._onUpdate(event.eid);
                break;
            case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                this._onUnload(event.eid);
                break;
            default:
                break;
            }
        }

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
        */
    };

    /*
    DigitsControl.prototype._onLoad = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.addNode(description);
        
    };

    DigitsControl.prototype._onUpdate = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.updateNode(description);
    };

    DigitsControl.prototype._onUnload = function (gmeId) {
        this._widget.removeNode(gmeId);
    };
    */

    DigitsControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    DigitsControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
        this._updateWidget = null;
    };

    DigitsControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    DigitsControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    DigitsControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, { suppressVisualizerFromNode: true });
        }
    };

    DigitsControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
        this._updateWidget = null;
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    DigitsControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    DigitsControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    DigitsControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    DigitsControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnModelHierarchyUp = toolBar.addButton({
            title: 'Go to parent',
            icon: 'glyphicon glyphicon-circle-arrow-up',
            clickFn: function (/*data*/) {
                WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
            }
        });
        this._toolbarItems.push(this.$btnModelHierarchyUp);
        this.$btnModelHierarchyUp.hide();

        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

        this._toolbarInitialized = true;
    };

    return DigitsControl;
});
