/*globals define, _, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Aug 01 2023 13:22:37 GMT-0700 (Pacific Daylight Time).
 */

// 'MyMiniProject/bundles/DigitsWidget.bundle',
//'myminiproject/bundles/DigitsWidget.bundle',
//'widgets/Digits/DigitsWidget',
define([
    'js/PanelBase/PanelBaseWithHeader',
    'js/PanelManager/IActivePanel',
    'myminiproject/bundles/DigitsWidget.bundle',
    './DigitsControl'
], function (
    PanelBaseWithHeader,
    IActivePanel,
    DigitsWidget,
    DigitsControl
) {
    'use strict';

    function DigitsPanel(layoutManager, params) {
        var options = {};
        //set properties from options
        options[PanelBaseWithHeader.OPTIONS.LOGGER_INSTANCE_NAME] = 'DigitsPanel';
        options[PanelBaseWithHeader.OPTIONS.FLOATING_TITLE] = true;

        //call parent's constructor
        PanelBaseWithHeader.apply(this, [options, layoutManager]);

        this._client = params.client;
        this.appId = `Digits-viz-id`;

        //initialize UI
        this._initialize();

        this.logger.debug('ctor finished');
    }

    //inherit from PanelBaseWithHeader
    _.extend(DigitsPanel.prototype, PanelBaseWithHeader.prototype);
    _.extend(DigitsPanel.prototype, IActivePanel.prototype);

    DigitsPanel.prototype._initialize = function () {
        
        
        this.$el.prop('id', this.appId);
        this.$el.css({
            width: '100%',
            height: '100%',
        });

        this.control = new DigitsControl({
            logger: this.logger,
            client: this._client
        });

        this.widget = null;
        
        
        /*
        var self = this;

        //set Widget title
        this.setTitle('');

        this.widget = new DigitsWidget(this.logger, this.$el);

        this.widget.setTitle = function (title) {
            self.setTitle(title);
        };

        this.control = new DigitsControl({
            logger: this.logger,
            client: this._client,
            widget: this.widget
        });
        */
        

        this.onActivate();
    };

    
    // Added function
    DigitsPanel.prototype.afterAppend = function afterAppend() {
        console.log('AFTER APPEND');
        
        DigitsWidget(this.appId, this.control, this);
    };
    

    /* OVERRIDE FROM WIDGET-WITH-HEADER */
    /* METHOD CALLED WHEN THE WIDGET'S READ-ONLY PROPERTY CHANGES */
    DigitsPanel.prototype.onReadOnlyChanged = function (isReadOnly) {
        //apply parent's onReadOnlyChanged
        PanelBaseWithHeader.prototype.onReadOnlyChanged.call(this, isReadOnly);

    };

    /*
    DigitsPanel.prototype.onResize = function (width, height) {
        this.logger.debug('onResize --> width: ' + width + ', height: ' + height);
        this.widget.onWidgetContainerResize(width, height);
    };*/

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    DigitsPanel.prototype.destroy = function () {
        this.control.destroy();
        //this.widget.destroy();

        PanelBaseWithHeader.prototype.destroy.call(this);
        WebGMEGlobal.KeyboardManager.setListener(undefined);
        WebGMEGlobal.Toolbar.refresh();
    };

    DigitsPanel.prototype.onActivate = function () {
        //this.widget.onActivate();
        this.control.onActivate();
        WebGMEGlobal.KeyboardManager.setListener(this.widget);
        WebGMEGlobal.Toolbar.refresh();
    };

    DigitsPanel.prototype.onDeactivate = function () {
        //this.widget.onDeactivate();
        this.control.onDeactivate();
        WebGMEGlobal.KeyboardManager.setListener(undefined);
        WebGMEGlobal.Toolbar.refresh();
    };

    return DigitsPanel;
});
